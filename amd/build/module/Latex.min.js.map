{"version":3,"sources":["../../src/module/Latex.js"],"names":["Latex","options","event","detail","type","readOnly","preventDefault","tooltipIsRun","_tooltipInterval","toggle","setInterval","getVirtualKeyboard","style","backgroundColor","tooltipColor","setTimeout","breakInterval","tooltipDuration","evt","document","createEvent","initEvent","querySelector","formulaContainer","value","_mathField","dispatchEvent","clearInterval","formula","init","_formula","_formulaContainer","_tooltipDuration","_tooltipIsRun","_tooltipColor","_isValid","_readOnly","_isRealKeyboard","_icon","MathfieldElement","validParameters","isValid","setOptionsMathField","setOptions","bindEvents","appendChild","window","console","error","querySelectorAll","length","locale","getKeyboardConfiguration","keyboardList","customVirtualKeyboardLayers","virtualKeyboards","_configs","item","keyboard","tooltip","label","layer","data","push","virtualKeyboardMode","virtualKeyboardLayout","virtualKeyboardToggleGlyph","icon","virtualKeyboardTheme","customVirtualKeyboards","join","addEventListener","keystrokeEvent","changeEvent","virtualKeyboardToggle","parentElement","shadowRoot","getShadowRoot","Ajax","call","methodname","args","promise","Promise","race","forEach","rows","JSON","parse"],"mappings":"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","sourcesContent":["import {MathfieldElement} from 'mod_latex/lib/mathlive';\nimport Ajax from 'core/ajax';\n\nexport default class Latex {\n\n    /**\n     * @type {string}\n     * @private\n     * @description Формула которую будем редактировать\n     */\n    _formula = '';\n\n    /**\n     * @type {string}\n     * @private\n     * @require\n     * @description Контейнер в котором будет отображаться формула для редактирование\n     */\n    _formulaContainer = '';\n\n    /**\n     * @type {number}\n     * @private\n     * @description Продолжительность мигания кнопки при попытке ручного ввода\n     */\n    _tooltipDuration = 4000;\n\n    /**\n     * @type {boolean}\n     * @private\n     * @description Запущено ли сейчас мигание кнопки\n     */\n    _tooltipIsRun = false;\n\n    /**\n     * @type {string}\n     * @private\n     * @description Цвет мигания кнопки\n     */\n    _tooltipColor = '#6c757d';\n\n    /**\n     * @type {number}\n     * @private\n     * @description Контейнер в который будет помещен интервал\n     */\n    _tooltipInterval = 0;\n\n    /**\n     * @type {boolean}\n     * @private\n     * @description Корректные ли параметры внутри класса\n     */\n    _isValid = true;\n\n    /**\n     * @type {boolean}\n     * @private\n     * @description Отображать формулу только для чтения\n     */\n    _readOnly = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     * @description Разрешить ввод с реальной клавиатуры\n     */\n    _isRealKeyboard = false;\n\n    /**\n     * @type {string}\n     * @private\n     * @description Иконка для вызова клавиатуры\n     */\n    _icon = `<svg\n        style=\"width: 21px;\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 512 512\">\n            <path\n                fill=\"currentColor\"\n                d=\"M192 288H32c-18 0-32 14-32 32v160c0 18 14 32 32 32h160c18 0 32-14\n                32-32V320c0-18-14-32-32-32zm-29 140c3 3 3 8 0 12l-11 11c-4 3-9 3-12\n                0l-28-28-28 28c-3 3-8 3-12 0l-11-11c-3-4-3-9 0-12l28-28-28-28c-3-3-3-8\n                0-12l11-11c4-3 9-3 12 0l28 28 28-28c3-3 8-3 12 0l11 11c3 4 3 9 0 12l-28\n                28 28 28zM480 0H320c-18 0-32 14-32  32v160c0 18 14 32 32 32h160c18 0\n                32-14 32-32V32c0-18-14-32-32-32zm-16 120c0 4-4 8-8 8h-40v40c0 4-4 8-8\n                8h-16c-4 0-8-4-8-8v-40h-40c-4 0-8-4-8-8v-16c0-4 4-8 8-8h40V56c0-4 4-8\n                8-8h16c4 0 8 4 8 8v40h40c4 0 8 4 8 8v16zm16 168H320c-18 0-32 14-32\n                32v160c0 18 14 32 32 32h160c18 0 32-14 32-32V320c0-18-14-32-32-32zm-16\n                152c0 4-4 8-8 8H344c-4 0-8-4-8-8v-16c0-4 4-8 8-8h112c4 0 8 4 8 8v16zm0-64c0\n                4-4 8-8 8H344c-4 0-8-4-8-8v-16c0-4 4-8 8-8h112c4 0 8 4 8 8v16zM192 0H32C14\n                0 0 14 0 32v160c0 18 14 32 32 32h160c18 0 32-14 32-32V32c0-18-14-32-32-32zm-16\n                120c0 4-4 8-8 8H56c-4 0-8-4-8-8v-16c0-4 4-8 8-8h112c4 0 8 4 8 8v16z\"/>\n    </svg>`;\n\n    /**\n     * @type {MathfieldElement}\n     * @private\n     * @description контейнер для хранения объекта для постройки формул\n     */\n    _mathField;\n\n    /**\n     * @type {[]}\n     * @private\n     * @description массив с файлами для конфигурации клавиатуры\n     */\n    _configs = [];\n\n    /**\n     * @type {[]}\n     * @private\n     */\n    _promises = [];\n\n    get formula() {\n        return this._formula;\n    }\n\n    set formula(value) {\n        this._formula = value;\n    }\n\n    get formulaContainer() {\n        return this._formulaContainer;\n    }\n\n    set formulaContainer(value) {\n        this._formulaContainer = value;\n    }\n\n    get tooltipDuration() {\n        return this._tooltipDuration;\n    }\n\n    set tooltipDuration(value) {\n        this._tooltipDuration = value;\n    }\n\n    get tooltipIsRun() {\n        return this._tooltipIsRun;\n    }\n\n    set tooltipIsRun(value) {\n        this._tooltipIsRun = value;\n    }\n\n    get tooltipColor() {\n        return this._tooltipColor;\n    }\n\n    set tooltipColor(value) {\n        this._tooltipColor = value;\n    }\n\n    get isValid() {\n        return this._isValid;\n    }\n\n    set isValid(value) {\n        this._isValid = value;\n    }\n\n    get readOnly() {\n        return this._readOnly;\n    }\n\n    set readOnly(value) {\n        this._readOnly = value;\n    }\n\n    get isRealKeyboard() {\n        return this._isRealKeyboard;\n    }\n\n    set isRealKeyboard(value) {\n        this._isRealKeyboard = value;\n    }\n\n    get icon() {\n        return this._icon;\n    }\n\n    set icon(value) {\n        this._icon = value;\n    }\n\n    constructor(options) {\n        this.formulaContainer = options.formulaContainer;\n        this.tooltipDuration = options.tooltipDuration;\n        this.formula = options.formula;\n        this.readOnly = options.readOnly ?? false;\n\n        this.init();\n    }\n\n    /**\n     * @returns {null|Latex}\n     * @description запускаем работу обертки\n     */\n    async init() {\n        this._mathField = new MathfieldElement();\n\n        this.validParameters();\n\n        if (!this.isValid) {\n            return null;\n        }\n        this._mathField.setOptions(await this.setOptionsMathField());\n        this.bindEvents();\n        this.appendChild();\n\n        this._mathField.value = this.formula;\n\n        return this;\n    }\n\n    /**\n     * @description верифицируем обязательные параметры\n     */\n    validParameters() {\n        if (!this.formulaContainer) {\n            window.console.error('Не указан обязательный параметр formulaContainer');\n            this.isValid = false;\n        }\n        if (document.querySelectorAll(this.formulaContainer).length > 1) {\n            window.console.error('найдено больше одного селектора для formulaContainer');\n            this.isValid = false;\n        }\n    }\n\n    /**\n     * @return {Object}\n     * @description устанавливаем значения для виджета\n     */\n    async setOptionsMathField() {\n\n        let options = {\n            locale: 'ru',\n        };\n        if (!this.readOnly) {\n\n            await this.getKeyboardConfiguration();\n\n            let keyboardList = {};\n            let customVirtualKeyboardLayers = {};\n            let virtualKeyboards = [];\n\n            for (const item of this._configs) {\n                keyboardList[item.keyboard] = {\n                    \"tooltip\": item.tooltip,\n                    \"label\": item.label,\n                    \"layer\": item.layer,\n                };\n                customVirtualKeyboardLayers[item.layer] = item.data;\n                virtualKeyboards.push(item.keyboard);\n            }\n            virtualKeyboards.push('all');\n            options = {\n                virtualKeyboardMode: \"manual\",\n                virtualKeyboardLayout: 'qwertz',\n                virtualKeyboardToggleGlyph: this.icon,\n                virtualKeyboardTheme: 'apple',\n                customVirtualKeyboardLayers: customVirtualKeyboardLayers,\n                customVirtualKeyboards: keyboardList,\n                virtualKeyboards: virtualKeyboards.join(' '),\n                ...options\n            };\n        }\n\n        return options;\n    }\n\n    /**\n     * @description устанавливаем слушатели на события\n     */\n    bindEvents() {\n        this._mathField.addEventListener('keystroke', this.keystrokeEvent);\n        this._mathField.addEventListener('change', this.changeEvent);\n        this._mathField.addEventListener('virtual-keyboard-toggle', this.virtualKeyboardToggle);\n    }\n\n    /**\n     * @description получаем скрытый корень\n     * @returns {ShadowRoot}\n     */\n    getShadowRoot() {\n        return document.querySelector(this.formulaContainer).parentElement.querySelector('math-field').shadowRoot;\n    }\n\n    /**\n     * @description получаем селектор обертки кнопки\n     * @returns {Element}\n     */\n    getVirtualKeyboard() {\n        return this.getShadowRoot().querySelector('.ML__virtual-keyboard-toggle');\n    }\n\n    /**\n     * @description обработчик события нажатие на кнопку\n     * @param {Object} event\n     */\n    keystrokeEvent = (event) => {\n        if (event.detail.event.type !== 'keypress') {\n            if (this.readOnly) {\n                event.preventDefault();\n                if (!this.tooltipIsRun && !this._tooltipInterval) {\n                    let toggle = true;\n                    this._tooltipInterval = setInterval(() => {\n                        this.getVirtualKeyboard().style.backgroundColor = toggle ? this.tooltipColor : 'transparent';\n                        toggle = !toggle;\n                        if (!this.tooltipIsRun) {\n                            this.tooltipIsRun = true;\n                        }\n                    }, 400);\n\n                    setTimeout(() => {\n                        this.breakInterval();\n                    }, this.tooltipDuration);\n                }\n            }\n        }\n    };\n\n    /**\n     * @description обработчик события изменения формулы\n     */\n    changeEvent = () => {\n        let evt = document.createEvent(\"HTMLEvents\");\n        evt.initEvent(\"change\", false, true);\n        document.querySelector(this.formulaContainer).value = this._mathField.value;\n        document.querySelector(this.formulaContainer).dispatchEvent(evt);\n    };\n\n    /**\n     * @description обработчик события открытие виртуальной клавиатуры\n     */\n    virtualKeyboardToggle = () => {\n        this.breakInterval();\n    };\n\n    /**\n     * @description останавливаем моргание кнопки отрытия виртуальной клавиатуры\n     */\n    breakInterval = () => {\n        if (this._tooltipInterval) {\n            clearInterval(this._tooltipInterval);\n            this._tooltipInterval = 0;\n            this.tooltipIsRun = false;\n            this.getVirtualKeyboard().style.backgroundColor = 'transparent';\n        }\n    };\n\n    /**\n     * @description устанавливаем созданную формулу в контейнер для отображения\n     */\n    appendChild() {\n        document.querySelector(this.formulaContainer).parentElement.appendChild(this._mathField);\n    }\n\n    /**\n     * @return {Promise<void>}\n     * @description Запрашиваем конфигурацию виртуальных клавиатур\n     */\n    async getKeyboardConfiguration() {\n        let promise = await Ajax.call([{\n            methodname: 'keyboard_configurations',\n            args: {}\n        }]);\n\n        (await Promise.race(promise)).forEach(({keyboard, layer, label, tooltip, data}) => {\n            data.rows = JSON.parse(data.rows);\n            this._configs.push({keyboard, layer, label, tooltip, data});\n        });\n    }\n}"],"file":"Latex.min.js"}